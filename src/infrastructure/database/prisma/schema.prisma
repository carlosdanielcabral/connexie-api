// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Address {
  id              Int                      @id @default(autoincrement())
  cep             String                   @db.VarChar(8)
  city            String                   @db.VarChar(255)
  state           String                   @db.VarChar(20)
  uf              String                   @db.VarChar(2)
  createdAt       DateTime                 @default(now()) @map("created_at")
  updatedAt       DateTime                 @updatedAt @map("updated_at")
  serviceProvider ServiceProviderAddress[]

  @@unique([cep, city, state, uf])
  @@map("address")
}

model ServiceProvider {
  id             String   @id @db.Char(36)
  name           String   @db.VarChar(255)
  email          String   @unique @db.VarChar(255)
  description    String   @db.Text
  profileImageId String?  @map("profile_image_id") @db.Char(36)
  password       String   @db.VarChar(255)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  jobMode        JobMode  @map("job_mode")
  jobAreaId      Int      @map("job_area_id")
  jobArea        JobArea  @relation(fields: [jobAreaId], references: [id])

  contact      ServiceProviderContact[]
  profileImage File?                    @relation(fields: [profileImageId], references: [id])
  addresses    ServiceProviderAddress[]

  @@map("service_provider")
}

model ServiceProviderAddress {
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])
  serviceProviderId String          @map("service_provider_id") @db.Char(36)
  address           Address         @relation(fields: [addressId], references: [id])
  addressId         Int             @map("address_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([serviceProviderId, addressId])
  @@map("service_provider_address")
}

model ServiceProviderContact {
  id                Int             @id @default(autoincrement())
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])
  serviceProviderId String          @map("service_provider_id") @db.Char(36)
  email             String          @db.VarChar(255)
  phone             String          @db.VarChar(255)
  cellphone         String          @db.VarChar(16)
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")

  @@map("service_provider_contact")
}

model File {
  id              String            @id @db.Char(36)
  originalName    String            @map("original_name") @db.VarChar(500)
  encoding        String            @db.VarChar(36)
  mimeType        String            @map("mime_type") @db.VarChar(255)
  blobName        String            @map("blob_name") @db.VarChar(500)
  originalSize    Int               @map("original_size")
  compressedSize  Int               @map("compressed_size")
  url             String            @db.VarChar(500)
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  ServiceProvider ServiceProvider[]
  Customer        Customer[]

  @@map("file")
}

model JobArea {
  id              Int               @id @default(autoincrement())
  title           String            @unique
  ServiceProvider ServiceProvider[]

  @@map("job_area")
}

enum JobMode {
  remote @map("remote")
  onsite @map("onsite")
  both   @map("both")
}

model Customer {
  id             String   @id @default(uuid()) @db.Char(36)
  name           String   @db.VarChar(255)
  email          String   @unique @db.VarChar(255)
  password       String   @db.VarChar(255)
  profileImageId String?  @map("profile_image_id") @db.Char(36)
  profileImage   File?    @relation(fields: [profileImageId], references: [id])
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("customer")
}
